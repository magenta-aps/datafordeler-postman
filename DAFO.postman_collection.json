{
	"variables": [],
	"info": {
		"name": "DAFO",
		"_postman_id": "42faf86e-f5ee-d12d-f92f-dc2ee65de879",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "CPR",
			"description": "",
			"item": [
				{
					"name": "1.1 Acquire Authorization",
					"description": "",
					"item": [
						{
							"name": "Acquire CPR token from STS",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"dafo_cpr_token\", responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test validity of SAML token\", function () {",
											"    // Load library from global variable as mentioned here:",
											"    // * https://github.com/postmanlabs/postman-app-support/issues/1180",
											"    // Library is generated by browserifying a nodejs library + snippet,",
											"    // and modifying the browserified output. The library exposes the saml_decode function.",
											"    eval(\"window={}\");",
											"    eval(postman.getGlobalVariable(\"saml_decode\"));",
											"    // Decode the response body, such that we get the resulting XML.",
											"    xml = window.saml_decode(responseBody);",
											"",
											"    pm.expect(xml).to.include(\"<saml2:Issuer>Dafo-STS</saml2:Issuer>\");",
											"    ",
											"    pm.expect(xml).to.include(\">cprbruger@magenta.dk</saml2:NameID>\");",
											"    ",
											"    pm.expect(xml).to.include(\"<saml2:Audience>https://data.gl/</saml2:Audience>\");",
											"    ",
											"    pm.expect(xml).to.include('<saml2:Attribute Name=\"https://data.gl/claims/userprofile\">');",
											"    pm.expect(xml).to.include(\">Adgang til CPR</saml2:AttributeValue>\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cpr_username}}&password={{dafo_cpr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cpr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cpr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": "Acquire a login token from the STS server, and save it in the current environment."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.2 Person",
					"description": "\n",
					"item": [
						{
							"name": "Search for CPR number",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Test reply headers\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"path\");",
											"    pm.expect(pm.response.text()).to.include(\"terms\");",
											"    pm.expect(pm.response.text()).to.include(\"requestTimestamp\");",
											"    pm.expect(pm.response.text()).to.include(\"responseTimestamp\");",
											"    pm.expect(pm.response.text()).to.include(\"username\");",
											"    pm.expect(pm.response.text()).to.include(\"page\");",
											"    pm.expect(pm.response.text()).to.include(\"pageSize\");",
											"    pm.expect(pm.response.text()).to.include(\"results\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/person/1/rest/search?personnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"person",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "personnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a person in the CPR register."
							},
							"response": []
						},
						{
							"name": "Lookup CPR person",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Test reply headers\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"path\");",
											"    pm.expect(pm.response.text()).to.include(\"terms\");",
											"    pm.expect(pm.response.text()).to.include(\"requestTimestamp\");",
											"    pm.expect(pm.response.text()).to.include(\"responseTimestamp\");",
											"    pm.expect(pm.response.text()).to.include(\"username\");",
											"    pm.expect(pm.response.text()).to.include(\"page\");",
											"    pm.expect(pm.response.text()).to.include(\"pageSize\");",
											"    pm.expect(pm.response.text()).to.include(\"results\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/person/1/rest/869e47d9-65c3-39b7-bd46-171b384faa5f",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Lookup a specific person in the CPR register."
							},
							"response": []
						},
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/person/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.3 Road",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/road/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.4 Residence",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/residence/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "CVR",
			"description": "",
			"item": [
				{
					"name": "1.1 Acquire Authorization copy",
					"description": "",
					"item": [
						{
							"name": "Acquire CVR token from STS",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"dafo_cvr_token\", responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test validity of SAML token\", function () {",
											"    // Load library from global variable as mentioned here:",
											"    // * https://github.com/postmanlabs/postman-app-support/issues/1180",
											"    // Library is generated by browserifying a nodejs library + snippet,",
											"    // and modifying the browserified output. The library exposes the saml_decode function.",
											"    eval(\"window={}\");",
											"    eval(postman.getGlobalVariable(\"saml_decode\"));",
											"    // Decode the response body, such that we get the resulting XML.",
											"    xml = window.saml_decode(responseBody);",
											"    ",
											"    pm.expect(xml).to.include(\"<saml2:Issuer>Dafo-STS</saml2:Issuer>\");",
											"    ",
											"    pm.expect(xml).to.include(\">cvrbruger@magenta.dk</saml2:NameID>\");",
											"    ",
											"    pm.expect(xml).to.include(\"<saml2:Audience>https://data.gl/</saml2:Audience>\");",
											"    ",
											"    pm.expect(xml).to.include('<saml2:Attribute Name=\"https://data.gl/claims/userprofile\">');",
											"    pm.expect(xml).to.include(\">Adgang til CVR</saml2:AttributeValue>\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cvr_username}}&password={{dafo_cvr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cvr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cvr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": "Acquire a login token from the STS server, and save it in the current environment."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.2 Company",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/company/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.3 CompanyUnit",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/companyunit/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.4 Participant",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/participant/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Gladdrreg",
			"description": "",
			"item": [
				{
					"name": "Address",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/address/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BNumber",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/bnumber/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "District",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/district/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Locality",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/locality/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Municipality",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/municipality/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PostalCode",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/postalcode/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Road",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/road/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "State",
					"description": "",
					"item": [
						{
							"name": "Self documented API copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/state/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}