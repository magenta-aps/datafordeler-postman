{
	"variables": [],
	"info": {
		"name": "DAFO",
		"_postman_id": "42faf86e-f5ee-d12d-f92f-dc2ee65de879",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1.1 Acquire STS tokens",
			"description": "",
			"item": [
				{
					"name": "Acquire CPR",
					"description": "",
					"item": [
						{
							"name": "Acquire CPR token from STS",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"dafo_cpr_token\", responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test validity of SAML token\", function () {",
											"    // Load library from global variable as mentioned here:",
											"    // * https://github.com/postmanlabs/postman-app-support/issues/1180",
											"    // Library is generated by browserifying a nodejs library + snippet,",
											"    // and modifying the browserified output. The library exposes the saml_decode function.",
											"    eval(\"window={}\");",
											"    eval(postman.getGlobalVariable(\"saml_decode\"));",
											"    // Decode the response body, such that we get the resulting XML.",
											"    xml = window.saml_decode(responseBody);",
											"    var jsonData = xml2Json(xml)[\"saml2:Assertion\"];",
											"    ",
											"    pm.expect(jsonData[\"saml2:AttributeStatement\"][\"saml2:Attribute\"][\"saml2:AttributeValue\"]._).to.eql(\"Adgang til CPR\");",
											"    pm.expect(jsonData[\"saml2:Conditions\"][\"saml2:AudienceRestriction\"][\"saml2:Audience\"]).to.eql(\"https://data.gl/\");",
											"    pm.expect(jsonData[\"saml2:Issuer\"]).to.eql(\"Dafo-STS\");",
											"    pm.expect(jsonData[\"saml2:Subject\"][\"saml2:NameID\"]._).to.eql(\"cprbruger@magenta.dk\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cpr_username}}&password={{dafo_cpr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cpr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cpr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": "Acquire a login token from the STS server, and save it in the current environment."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Acquire CVR",
					"description": "",
					"item": [
						{
							"name": "Acquire CVR token from STS",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setEnvironmentVariable(\"dafo_cvr_token\", responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test validity of SAML token\", function () {",
											"    // Load library from global variable as mentioned here:",
											"    // * https://github.com/postmanlabs/postman-app-support/issues/1180",
											"    // Library is generated by browserifying a nodejs library + snippet,",
											"    // and modifying the browserified output. The library exposes the saml_decode function.",
											"    eval(\"window={}\");",
											"    eval(postman.getGlobalVariable(\"saml_decode\"));",
											"    // Decode the response body, such that we get the resulting XML.",
											"    xml = window.saml_decode(responseBody);",
											"    var jsonData = xml2Json(xml)[\"saml2:Assertion\"];",
											"    ",
											"    pm.expect(jsonData[\"saml2:AttributeStatement\"][\"saml2:Attribute\"][\"saml2:AttributeValue\"]._).to.eql(\"Adgang til CVR\");",
											"    pm.expect(jsonData[\"saml2:Conditions\"][\"saml2:AudienceRestriction\"][\"saml2:Audience\"]).to.eql(\"https://data.gl/\");",
											"    pm.expect(jsonData[\"saml2:Issuer\"]).to.eql(\"Dafo-STS\");",
											"    pm.expect(jsonData[\"saml2:Subject\"][\"saml2:NameID\"]._).to.eql(\"cvrbruger@magenta.dk\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cvr_username}}&password={{dafo_cvr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cvr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cvr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": "Acquire a login token from the STS server, and save it in the current environment."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Rejection",
					"description": "",
					"item": [
						{
							"name": "Reject - Bad Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"Failed to authenticate user\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cpr_username}}&password=bad_password",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cpr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "bad_password",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - Missing Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"No valid credentials given for passive STS\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cpr_username}}&password=",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cpr_username}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - No Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"No valid credentials given for passive STS\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username={{dafo_cpr_username}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "{{dafo_cpr_username}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - Bad Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"Failed to authenticate user\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username=bad_user&password={{dafo_cpr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "bad_user",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cpr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - Missing Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"No valid credentials given for passive STS\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?username=&password={{dafo_cpr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "username",
											"value": "",
											"equals": true,
											"description": ""
										},
										{
											"key": "password",
											"value": "{{dafo_cpr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - No Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"No valid credentials given for passive STS\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://sts.test.data.gl/get_token_passive?password={{dafo_cpr_password}}",
									"protocol": "https",
									"host": [
										"sts",
										"test",
										"data",
										"gl"
									],
									"path": [
										"get_token_passive"
									],
									"query": [
										{
											"key": "password",
											"value": "{{dafo_cpr_password}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Reject - No login information",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Test login rejection\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"401 - Unauthorized\");",
											"    pm.expect(pm.response.text()).to.include(\"No valid credentials given for passive STS\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://sts.test.data.gl/get_token_passive",
								"method": "POST",
								"header": [],
								"body": {},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "1.2 CPR",
			"description": "",
			"item": [
				{
					"name": "Authentication",
					"description": "",
					"item": [
						{
							"name": "CVR token yields no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.AccessDeniedException\");",
											"    pm.expect(jsonData.message).to.include(\"does not have access to ReadCpr\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/person/1/rest/search?personnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"person",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "personnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cvr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Assert that the CVR SAML Token does not permit access to CPR."
							},
							"response": []
						},
						{
							"name": "Invalid token yields no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Unauthorized\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.InvalidTokenException\");",
											"    pm.expect(jsonData.message).to.include(\"Could not parse authorization token\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/person/1/rest/search?personnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"person",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "personnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML CAFEBABE",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Assert that an invalid SAML Token does not permit access to CPR."
							},
							"response": []
						},
						{
							"name": "No token yields no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.AccessDeniedException\");",
											"    pm.expect(jsonData.message).to.include(\"does not have access to ReadCpr\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/person/1/rest/search?personnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"person",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "personnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Assert that no token does not permit access to CPR."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Person",
					"description": "\n",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"additionalProperties\": false,",
											"    \"minProperties\": 8,",
											"    \"properties\": {",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"terms\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"requestTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"responseTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"username\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"page\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"pageSize\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"additionalProperties\": false,",
											"                \"minProperties\": 4,",
											"                \"properties\": {",
											"                    \"UUID\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"personnummer\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"object\",",
											"                        \"additionalProperties\": false,",
											"                        \"minProperties\": 2,",
											"                        \"properties\": {",
											"                            \"uuid\": {",
											"                                \"type\": \"string\",",
											"                            },",
											"                            \"domaene\": {",
											"                                \"type\": \"string\",",
											"                            },",
											"                        }",
											"                    },",
											"                    \"registreringer\": {",
											"                        \"type\": \"array\",",
											"                        \"minItems\": 1,",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [\"registreringFra\", \"registreringTil\"],",
											"                            \"minProperties\": 3,",
											"                            \"properties\": {",
											"                                /*",
											"                                \"registreringFra\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"registreringTil\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                */",
											"                                \"adresseoplysninger\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"lastUpdated\", \"conavn\", \"cpradresse\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"lastUpdated\": {",
											"                                                \"type\": \"string\"",
											"                                            },",
											"                                            /*",
											"                                            \"conavn\": {",
											"                                                \"type\": \"string\"",
											"                                            },",
											"                                            \"cpradresse\": {",
											"                                                \"type\": \"null\"",
											"                                            }",
											"                                            */",
											"                                        }",
											"                                    }",
											"                                },",
											"                                \"navnemyndighed\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"lastUpdated\", \"myndighed\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"lastUpdated\": {",
											"                                                \"type\": \"string\"",
											"                                            },",
											"                                            \"myndighed\": {",
											"                                                \"type\": \"string\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.globals.set(\"cpr_person_schema\", JSON.stringify(schema));"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/person/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for CPR number",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_person_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/person/1/rest/search?personnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"person",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "personnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a person in the CPR register."
							},
							"response": []
						},
						{
							"name": "1.3 Lookup CPR person",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_person_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.eql(1);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/person/1/rest/06a3c66f-e77c-35fc-b2f4-ac91129dc5e0",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Lookup a specific person in the CPR register."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Road",
					"description": "",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"additionalProperties\": false,",
											"    \"minProperties\": 8,",
											"    \"properties\": {",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"terms\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"requestTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"responseTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"username\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"page\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"pageSize\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"additionalProperties\": false,",
											"                \"minProperties\": 6,",
											"                \"properties\": {",
											"                    \"UUID\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"kommunekode\": {",
											"                        \"type\": \"number\",",
											"                    },",
											"                    \"vejkode\": {",
											"                        \"type\": \"number\",",
											"                    },",
											"                    \"municipalityCode\": {",
											"                        \"type\": \"number\",",
											"                    },",
											"                    \"domaene\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"registreringer\": {",
											"                        \"type\": \"array\",",
											"                        \"minItems\": 1,",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [\"registreringFra\", \"registreringTil\", \"sekvensnummer\", \"checksum\"],",
											"                            \"minProperties\": 5,",
											"                            \"properties\": {",
											"                                \"sekvensnummer\": {",
											"                                    \"type\": \"number\"",
											"                                },",
											"                                /*",
											"                                \"registreringFra\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"registreringTil\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                \"checksum\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                */",
											"                                \"sidstImporteret\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                \"virkninger\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"data\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"data\": {",
											"                                                \"type\": \"object\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.globals.set(\"cpr_road_schema\", JSON.stringify(schema));"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/road/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for Road",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_road_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/road/1/rest/search?vejnavn=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"road",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "vejnavn",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a road in the CPR register."
							},
							"response": []
						},
						{
							"name": "1.3 Lookup Road",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_road_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.eql(1);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/road/1/rest/33052bb6-52ec-3270-9988-0cc0093bb013",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Lookup a specific road in the CPR register."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Residence",
					"description": "",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"additionalProperties\": false,",
											"    \"minProperties\": 8,",
											"    \"properties\": {",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"terms\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"requestTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"responseTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"username\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"page\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"pageSize\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"additionalProperties\": false,",
											"                \"minProperties\": 3,",
											"                \"properties\": {",
											"                    \"UUID\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"domaene\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"registreringer\": {",
											"                        \"type\": \"array\",",
											"                        \"minItems\": 1,",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [\"registreringFra\", \"registreringTil\", \"sekvensnummer\", \"checksum\"],",
											"                            \"minProperties\": 5,",
											"                            \"properties\": {",
											"                                \"sekvensnummer\": {",
											"                                    \"type\": \"number\"",
											"                                },",
											"                                /*",
											"                                \"registreringFra\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"registreringTil\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                \"checksum\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                */",
											"                                \"sidstImporteret\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                \"virkninger\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"data\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"data\": {",
											"                                                \"type\": \"object\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.globals.set(\"cpr_residence_schema\", JSON.stringify(schema));"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/residence/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for Residence",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_residence_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cpr/residence/1/rest/search?husnummer=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cpr",
										"residence",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "husnummer",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a residence in the CPR register."
							},
							"response": []
						},
						{
							"name": "1.3 Lookup Resience",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cpr_residence_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.eql(1);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cpr/residence/1/rest/377e2d63-79e7-3f4e-940f-81ca0684a88a",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Lookup a specific residence in the CPR register."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "1.3 CVR",
			"description": "",
			"item": [
				{
					"name": "Authentication",
					"description": "",
					"item": [
						{
							"name": "CPR token yields no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.AccessDeniedException\");",
											"    pm.expect(jsonData.message).to.include(\"does not have access to ReadCvr\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/company/1/rest/search?virksomhedsnavn=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"company",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "virksomhedsnavn",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Assert that the CPR SAML Token does not permit access to CVR."
							},
							"response": []
						},
						{
							"name": "Invalid token yields no access copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Unauthorized\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.InvalidTokenException\");",
											"    pm.expect(jsonData.message).to.include(\"Could not parse authorization token\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/company/1/rest/search?virksomhedsnavn=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"company",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "virksomhedsnavn",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML CAFEBABE",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Assert that an invalid SAML Token does not permit access to CPR."
							},
							"response": []
						},
						{
							"name": "No token yields no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var schema = {",
											"  \"error\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"exception\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"message\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"status\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"timestamp\": {",
											"    \"type\": \"int\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");",
											"    pm.expect(jsonData.exception).to.eql(\"dk.magenta.datafordeler.core.exception.AccessDeniedException\");",
											"    pm.expect(jsonData.message).to.include(\"does not have access to ReadCvr\");",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/company/1/rest/search?virksomhedsnavn=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"company",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "virksomhedsnavn",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Assert that no token does not permit access to CVR."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Company",
					"description": "",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"additionalProperties\": false,",
											"    \"minProperties\": 8,",
											"    \"properties\": {",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"terms\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"requestTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"responseTimestamp\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"username\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"page\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"pageSize\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"additionalProperties\": false,",
											"                \"minProperties\": 4,",
											"                \"properties\": {",
											"                    \"UUID\": {",
											"                        \"type\": \"string\",",
											"                    },",
											"                    \"CVRNummer\": {",
											"                        \"type\": \"number\",",
											"                    },",
											"                    \"id\": {",
											"                        \"type\": \"object\",",
											"                        \"additionalProperties\": false,",
											"                        \"minProperties\": 2,",
											"                        \"properties\": {",
											"                            \"uuid\": {",
											"                                \"type\": \"string\",",
											"                            },",
											"                            \"domaene\": {",
											"                                \"type\": \"string\",",
											"                            },",
											"                        }",
											"                    },",
											"                    \"registreringer\": {",
											"                        \"type\": \"array\",",
											"                        \"minItems\": 1,",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"required\": [\"registreringFra\", \"registreringTil\"],",
											"                            \"minProperties\": 3,",
											"                            \"properties\": {",
											"                                /*",
											"                                \"registreringFra\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"registreringTil\": {",
											"                                    \"type\": \"string\",",
											"                                },",
											"                                */",
											"                                \"virksomhedsnavn\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"lastUpdated\", \"navn\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"navn\": {",
											"                                                \"type\": \"string\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                },",
											"                                \"virksomhedsform\" : {",
											"                                    \"type\": \"array\",",
											"                                    \"minItems\": 1,",
											"                                    \"items\": {",
											"                                        \"type\": \"object\",",
											"                                        \"required\": [\"virkningFra\", \"virkningTil\", \"lastUpdated\", \"formkode\", \"dataleverandør\"],",
											"                                        \"properties\": {",
											"                                            /*",
											"                                            \"virkningFra\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            \"virkningTil\": {",
											"                                                \"type\": \"null\"",
											"                                            },",
											"                                            */",
											"                                            \"lastUpdated\": {",
											"                                                \"type\": \"string\"",
											"                                            },",
											"                                            \"formkode\": {",
											"                                                \"type\": \"string\"",
											"                                            },",
											"                                            \"dataleverandør\": {",
											"                                                \"type\": \"string\"",
											"                                            }",
											"                                        }",
											"                                    }",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"pm.globals.set(\"cvr_company_schema\", JSON.stringify(schema));"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/company/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for company name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cvr_company_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/company/1/rest/search?virksomhedsnavn=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"company",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "virksomhedsnavn",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cvr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a company by its name."
							},
							"response": []
						},
						{
							"name": "1.3 Lookup company",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = JSON.parse(pm.globals.get(\"cvr_company_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.eql(1);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/company/1/rest/4785c429-31e7-31c9-ba6a-863c96f38e15",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cvr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Lookup a specific company in the CVR register."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CompanyUnit",
					"description": "",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/companyunit/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for company unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"/*",
											"var schema = JSON.parse(pm.globals.get(\"cvr_company_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"*/",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/companyunit/1/rest/search?hovedbranche=*",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"companyunit",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "hovedbranche",
											"value": "*",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cvr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a companyunit by its branche."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Participant",
					"description": "",
					"item": [
						{
							"name": "1.1 Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/cvr/participant/1/rest/",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cpr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "1.2 Search for company participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"/*",
											"var schema = JSON.parse(pm.globals.get(\"cvr_company_schema\"));",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    valid = tv4.validate(jsonData, schema);",
											"    // console.log(tv4.error);",
											"    pm.expect(valid).to.be.true;",
											"});",
											"*/",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/cvr/participant/1/rest/search?a=b",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"cvr",
										"participant",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "a",
											"value": "b",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SAML {{dafo_cvr_token}}",
										"description": "The DAFO token used for authorization."
									}
								],
								"body": {},
								"description": "Search for a company participant by its name."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "1.4 Gladdrreg",
			"description": "",
			"item": [
				{
					"name": "Address",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/address/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						},
						{
							"name": "Search for an address",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema = {",
											"  \"path\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"terms\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"requestTimestamp\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"responseTimestamp\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"username\": {",
											"    \"type\": \"string\"",
											"  },",
											"  \"page\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"pageSize\": {",
											"    \"type\": \"int\"",
											"  },",
											"  \"results\": {",
											"    \"type\": \"array\"",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Test reply\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.page).to.eql(1);",
											"    pm.expect(jsonData.results.length).to.not.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "https://test.data.gl/gladdrreg/address/1/rest/search?active=true",
									"protocol": "https",
									"host": [
										"test",
										"data",
										"gl"
									],
									"path": [
										"gladdrreg",
										"address",
										"1",
										"rest",
										"search"
									],
									"query": [
										{
											"key": "active",
											"value": "true",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Search for an address in the greenland address register."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BNumber",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/bnumber/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "District",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/district/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Locality",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/locality/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Municipality",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/municipality/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PostalCode",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/postalcode/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Road",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/road/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "State",
					"description": "",
					"item": [
						{
							"name": "Self documented API",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Self documented API\", function () {",
											"    // Check for the JSON keys to exist",
											"    pm.expect(pm.response.text()).to.include(\"metadata_url\");",
											"    pm.expect(pm.response.text()).to.include(\"fetch_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_url\");",
											"    pm.expect(pm.response.text()).to.include(\"declaration_url\");",
											"    pm.expect(pm.response.text()).to.include(\"search_queryfields\");",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "https://test.data.gl/gladdrreg/state/1/rest/",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Call the self documentation endpoint."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}